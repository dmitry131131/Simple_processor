/**
 * @file 
 * @brief File with codegenration for all processor projects
*/
#ifndef FUNCTIONS_DEF
#define FUNCTIONS_DEF

/*----------------------------------------->>     ~~LISTING MACROSES~~      <<-----------------------------------------*/

#define WRITE_COMMAND_TO_LISTING(command, code, arg, reg)do{                                                            \
    textBuffer.bufferPointer += (size_t)                                                                                \
    sprintf((textBuffer.Buffer + textBuffer.bufferPointer),                                                             \
    "|%-9s|%-8d|%-6d|%-13d|%-9d|%-27s|\n"                                                                               \
    "+---------+--------+------+-------------+---------+---------------------------+\n",                                \
    (command), (code), (int) binBuffer.bufferPointer, (arg), (reg), remove_space_from_begining(text->linesPtr[i]));     \
}while(0)

#define WRITE_SINGLE_COMMAND_TO_LISTING(command, code)do{                                                               \
    textBuffer.bufferPointer += (size_t)                                                                                \
    sprintf((textBuffer.Buffer + textBuffer.bufferPointer),                                                             \
    "|%-9s|%-8d|%-6d|    -----    |  -----  |%-27s|\n"                                                                  \
    "+---------+--------+------+-------------+---------+---------------------------+\n",                                \
    (command), (code), (int) binBuffer.bufferPointer, remove_space_from_begining(text->linesPtr[i]));                   \
}while(0)

#define WRITE_DOUBLE_COMMAND_TO_LISTING(command, code, arg)do{                                                          \
    textBuffer.bufferPointer += (size_t)                                                                                \
    sprintf((textBuffer.Buffer + textBuffer.bufferPointer),                                                             \
    "|%-9s|%-8d|%-6d|%-13.2lf|  -----  |%-27s|\n"                                                                       \
    "+---------+--------+------+-------------+---------+---------------------------+\n",                                \
    (command), (code), (int) binBuffer.bufferPointer, (arg), remove_space_from_begining(text->linesPtr[i]));            \
}while(0)

#define WRITE_SINGLE_COMMAND(command, num) do{                                                                          \
    commandCount++;                                                                                                     \
    WRITE_SINGLE_COMMAND_TO_LISTING(command, num);                                                                      \
    write_char_to_buffer(&binBuffer, num);                                                                              \
}while(0)

/*------------------------------------------>>     ~~JUMP MACROSES~~      <<-------------------------------------------*/

#define JUMP_ASSEMBLER(jmp_name, jmp_type) {                                                                            \
    commandCount++;                                                                                                     \
                                                                                                                        \
    int tagIp = -1;                                                                                                     \
    if (sscanf(text->linesPtr[i], "%s %d", command, &tagIp) == 2)                                                       \
    {                                                                                                                   \
        WRITE_COMMAND_TO_LISTING(jmp_name, jmp_type, tagIp, -1);                                                        \
                                                                                                                        \
        if ((error = write_char_to_buffer(&binBuffer, jmp_type)))                                                       \
        {                                                                                                               \
            break;                                                                                                      \
        }                                                                                                               \
        if ((error = write_int_to_buffer(&binBuffer, tagIp)))                                                           \
        {                                                                                                               \
            break;                                                                                                      \
        }                                                                                                               \
        continue;                                                                                                       \
    }                                                                                                                   \
                                                                                                                        \
    char tagName[MAX_COMMAND_LEN] = {};                                                                                 \
    if (sscanf(text->linesPtr[i], "%s %s", command, tagName) != 2)                                                      \
    {                                                                                                                   \
        error = INVALID_SYNTAX;                                                                                         \
        print_assembler_error(error, text->linesPtr[i], i+1);                                                           \
        break;                                                                                                          \
    }                                                                                                                   \
                                                                                                                        \
    tagIp = -1;                                                                                                         \
    get_tag_ip(tagBuffer, tagName, &tagIp);                                                                             \
                                                                                                                        \
    WRITE_COMMAND_TO_LISTING(jmp_name, jmp_type, tagIp, -1);                                                            \
                                                                                                                        \
    if ((error = write_char_to_buffer(&binBuffer, jmp_type)))                                                           \
    {                                                                                                                   \
        break;                                                                                                          \
    }                                                                                                                   \
    if ((error = write_int_to_buffer(&binBuffer, tagIp)))                                                               \
    {                                                                                                                   \
        break;                                                                                                          \
    }                                                                                                                   \
}

#define JUMP_PROCESSOR                                                                                                  \
    processor->IP++;                                                                                                    \
                                                                                                                        \
    int newIp = -1;                                                                                                     \
    if (copy_data_from_buffer(processor->CS + processor->IP, &newIp, sizeof(int)))                                      \
    {                                                                                                                   \
        return COPU_ARG_ERROR;                                                                                          \
    }

#define JUMP_DISASSEMBLER(name) do{                                                                                     \
    disasmCase->IP++;                                                                                                   \
                                                                                                                        \
    int newIp = -1;                                                                                                     \
    if (copy_data_from_buffer(disasmCase->CS + disasmCase->IP, &newIp, sizeof(int)))                                    \
    {                                                                                                                   \
        return COPU_ARG_ERROR;                                                                                          \
    }                                                                                                                   \
    disasmCase->IP += sizeof(int);                                                                                      \
                                                                                                                        \
    textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), name " %d\n", newIp);  \
}while(0)                          

/*---------------------------------------->>     ~~PUSH/POP MACROSES~~      <<-----------------------------------------*/

#define CHECK_REGISTER_NAME(reg)                                                                                        \
    if (textArgName[0] == 'r' && textArgName[2] == 'x')                                                                 \
    {                                                                                                                   \
        switch ((char) textArgName[1])                                                                                  \
        {                                                                                                               \
        case 'a':                                                                                                       \
            reg = RAX;                                                                                                  \
            break;                                                                                                      \
        case 'b':                                                                                                       \
            reg = RBX;                                                                                                  \
            break;                                                                                                      \
        case 'c':                                                                                                       \
            reg = RCX;                                                                                                  \
            break;                                                                                                      \
        case 'd':                                                                                                       \
            reg = RDX;                                                                                                  \
            break;                                                                                                      \
        case 'p':                                                                                                       \
            reg = RPX;                                                                                                  \
            break;                                                                                                      \
                                                                                                                        \
        default:                                                                                                        \
            error = WRONG_REGISTER_NAME;                                                                                \
            print_assembler_error(error, text->linesPtr[i], i+1);                                                       \
            break;                                                                                                      \
        }                                                                                                               \
    }                                                                                                                   \
    else                                                                                                                \
    {                                                                                                                   \
        error = INVALID_SYNTAX;                                                                                         \
        print_assembler_error(error, text->linesPtr[i], i+1);                                                           \
        break;                                                                                                          \
    }

#define CHECH_TEXT_ARG(textArgName)                                                                                     \
    if (sscanf(textArgName, "%lf", &commandArg) == 1)                                                                   \
    {                                                                                                                   \
        cmd |= IMM;                                                                                                     \
    }                                                                                                                   \
    else if (strlen(textArgName) == 3)                                                                                  \
    {                                                                                                                   \
        cmd |= REG;                                                                                                     \
        CHECK_REGISTER_NAME(reg)                                                                                        \
    }                                                                                                                   \
    else                                                                                                                \
    {                                                                                                                   \
        cmd |= (REG | IMM);                                                                                             \
        CHECK_REGISTER_NAME(reg)                                                                                        \
        if(sscanf(textArgName + 3, "+%lf", &commandArg) != 1)                                                           \
        {                                                                                                               \
            error = INVALID_SYNTAX;                                                                                     \
            print_assembler_error(error, text->linesPtr[i], i+1);                                                       \
            break;                                                                                                      \
        }                                                                                                               \
    }

#define PUSH_AND_POP_BODY(command_name)                                                                                 \
{                                                                                                                       \
    registerNames reg = NO_REG;                                                                                         \
                                                                                                                        \
    if (textArgName[0] == '[')                                                                                          \
    {                                                                                                                   \
        cmd |= RAM;                                                                                                     \
                                                                                                                        \
        if (sscanf(text->linesPtr[i], "%s [%[A-Za-z+0-9_]]", command, textArgName) != 2)                                \
        {                                                                                                               \
            error = INVALID_SYNTAX;                                                                                     \
            print_assembler_error(error, text->linesPtr[i], i+1);                                                       \
            break;                                                                                                      \
        }                                                                                                               \
                                                                                                                        \
        CHECH_TEXT_ARG(textArgName)                                                                                     \
    }                                                                                                                   \
    else                                                                                                                \
    {                                                                                                                   \
        CHECH_TEXT_ARG(textArgName)                                                                                     \
    }                                                                                                                   \
                                                                                                                        \
    if (error) break;                                                                                                   \
                                                                                                                        \
    WRITE_COMMAND_TO_LISTING(command_name, cmd, (int) commandArg, reg);                                                 \
                                                                                                                        \
    if ((error = write_char_to_buffer(&binBuffer, cmd)))                                                                \
    {                                                                                                                   \
        break;                                                                                                          \
    }                                                                                                                   \
                                                                                                                        \
    if (cmd & REG)                                                                                                      \
    {                                                                                                                   \
        if ((error = write_char_to_buffer(&binBuffer, reg)))                                                            \
        {                                                                                                               \
            break;                                                                                                      \
        }                                                                                                               \
    }                                                                                                                   \
                                                                                                                        \
    if ((cmd & IMM))                                                                                                    \
    {                                                                                                                   \
        if ((error = write_int_to_buffer(&binBuffer, (int) commandArg)))                                                \
        {                                                                                                               \
            break;                                                                                                      \
        }                                                                                                               \
    }                                                                                                                   \
}

#define WRITE_REGISTER_NAME(reg) do{                                                                                    \
    char reg_name[8] = {};                                                                                              \
    switch (reg)                                                                                                        \
    {                                                                                                                   \
        case NO_REG:                                                                                                    \
            break;                                                                                                      \
                                                                                                                        \
        case RAX:                                                                                                       \
            strcpy(reg_name, "rax");                                                                                    \
            break;                                                                                                      \
        case RBX:                                                                                                       \
            strcpy(reg_name, "rbx");                                                                                    \
            break;                                                                                                      \
        case RCX:                                                                                                       \
            strcpy(reg_name, "rcx");                                                                                    \
            break;                                                                                                      \
        case RDX:                                                                                                       \
            strcpy(reg_name, "rdx");                                                                                    \
            break;                                                                                                      \
        case RPX:                                                                                                       \
            strcpy(reg_name, "rpx");                                                                                    \
            break;                                                                                                      \
                                                                                                                        \
        default:                                                                                                        \
            break;                                                                                                      \
    }                                                                                                                   \
    textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "%s", reg_name);       \
}while(0)  

/*----------------------------------->>     ~~SINGLE DISASSEMBLER MACROS~~      <<-------------------------------------*/

#define SINGLE_COMMAND_DISASM(name) do{                                                                                 \
    textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), name "\n");            \
    disasmCase->IP++;                                                                                                   \
}while(0)

/*---------------------------------------->>     ~~DEF_CMD MACROSES~~      <<------------------------------------------*/

DEF_CMD("jmp", JMP, 1, 
JUMP_ASSEMBLER("jmp", JMP), 
{
    JUMP_PROCESSOR

    err = processor_jmp(processor, newIp);
},
{
    JUMP_DISASSEMBLER("jmp");
})

DEF_CMD("ja", JA, 1,
JUMP_ASSEMBLER("ja", JA),
{
    JUMP_PROCESSOR

    err = processor_ja(processor, newIp);
},
{
    JUMP_DISASSEMBLER("ja");
})

DEF_CMD("jae", JAE, 1,
JUMP_ASSEMBLER("jae", JAE),
{
    JUMP_PROCESSOR

    err = processor_jae(processor, newIp);
},
{
    JUMP_DISASSEMBLER("jae");
})

DEF_CMD("jb", JB, 1,
JUMP_ASSEMBLER("jb", JB),
{
    JUMP_PROCESSOR

    err = processor_jb(processor, newIp);
},
{
    JUMP_DISASSEMBLER("jb");
})

DEF_CMD("jbe", JBE, 1,
JUMP_ASSEMBLER("jbe", JBE),
{
    JUMP_PROCESSOR

    err = processor_jbe(processor, newIp);
},
{
    JUMP_DISASSEMBLER("jbe");
})

DEF_CMD("je", JE, 1,
JUMP_ASSEMBLER("je", JE),
{
    JUMP_PROCESSOR

    err = processor_je(processor, newIp);
},
{
    JUMP_DISASSEMBLER("je");
})

DEF_CMD("jne", JNE, 1,
JUMP_ASSEMBLER("jne", JNE),
{
    JUMP_PROCESSOR

    err = processor_jne(processor, newIp);
},
{
    JUMP_DISASSEMBLER("jne");
})

DEF_CMD("call", CALL, 1,
JUMP_ASSEMBLER("call", CALL),
{
    JUMP_PROCESSOR

    err = processor_call(processor, newIp);
},
{
    JUMP_DISASSEMBLER("call");
})

DEF_CMD("push", PUSH, 1,
{                                                                       
    commandCount++;
    unsigned char cmd = PUSH;

    if(sscanf(text->linesPtr[i], "%s %lf", command, &commandArg) == 2)
    {
        cmd |= IMM;

        WRITE_DOUBLE_COMMAND_TO_LISTING("push", cmd, commandArg);

        if ((error = write_char_to_buffer(&binBuffer, cmd)))
        {
            break;
        }

        if ((error = write_double_to_buffer(&binBuffer, commandArg)))
        {
            break;
        }
    }

    else if (sscanf(text->linesPtr[i], "%s %s", command, textArgName) == 2)
    {
        PUSH_AND_POP_BODY("push");
    }
    else
    {
        error = INVALID_SYNTAX;
        print_assembler_error(error, text->linesPtr[i], i+1);
        break;
    }
}, 
{
    processor->IP++;

    if ((int) command == (PUSH | IMM))
    {
        if (copy_data_from_buffer(processor->CS + processor->IP, &commandArg, sizeof(double)))
        {
            return COPU_ARG_ERROR;
        }

        err = processor_push(commandArg, &(processor->stack));

        processor->IP += sizeof(double);
    }
    else if ((int) command == (PUSH | REG))
    {
        reg = (registerNames) *(processor->CS + processor->IP);

        err = processor_push_from_register(processor, reg);

        processor->IP++;
    }
    else if (((unsigned int) command & COMMAND_MASK) == (PUSH | RAM | IMM))
    {
        int adress = -1;
        if (copy_data_from_buffer(processor->CS + processor->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        err = processor_push_from_RAM(processor, adress);

        processor->IP += sizeof(int);
    }
    else if(((unsigned int) command & COMMAND_MASK) == (PUSH | RAM | REG))
    {
        int adress = 0;

        reg = (registerNames) *(processor->CS + processor->IP);
        
        err = calculate_RAM_adress(processor, reg, &adress);

        err = processor_push_from_RAM(processor, adress);

        processor->IP += sizeof(char);
    }
    else if (((unsigned int) command & COMMAND_MASK) == (PUSH | RAM | REG | IMM))
    {
        int adress = -1;
        reg = (registerNames) *(processor->CS + processor->IP);
        processor->IP++;

        if (copy_data_from_buffer(processor->CS + processor->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        err = calculate_RAM_adress(processor, reg, &adress);

        err = processor_push_from_RAM(processor, adress);

        processor->IP += sizeof(int);
    }
},
{
    disasmCase->IP++;
    if ((int) command == (PUSH | IMM))
    {
        if (copy_data_from_buffer(disasmCase->CS + disasmCase->IP, &commandArg, sizeof(double)))
        {
            return COPU_ARG_ERROR;
        }
        
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "push %lf\n", commandArg);

        disasmCase->IP += sizeof(double);
    }
    else if ((int) command == (PUSH | REG))
    {
        reg = (registerNames) *(disasmCase->CS + disasmCase->IP);

        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "push ");
        WRITE_REGISTER_NAME(reg);
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "\n");

        disasmCase->IP++;
    }
    else if (((unsigned int) command & COMMAND_MASK) == (PUSH | RAM | IMM))
    {
        int adress = -1;
        if (copy_data_from_buffer(disasmCase->CS + disasmCase->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "push [%d]\n", adress);

        disasmCase->IP += sizeof(int);
    }
    else if(((unsigned int) command & COMMAND_MASK) == (PUSH | RAM | REG))
    {
        reg = (registerNames) *(disasmCase->CS + disasmCase->IP);
        
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "push [");
        WRITE_REGISTER_NAME(reg);
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "]\n");

        disasmCase->IP += sizeof(char);
    }
    else if (((unsigned int) command & COMMAND_MASK) == (PUSH | RAM | REG | IMM))
    {
        int adress = -1;
        reg = (registerNames) *(disasmCase->CS + disasmCase->IP);
        disasmCase->IP++;

        if (copy_data_from_buffer(disasmCase->CS + disasmCase->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "push [");
        WRITE_REGISTER_NAME(reg);
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "+%d]\n", adress);

        disasmCase->IP += sizeof(int);
    }
})

DEF_CMD("pop", POP, 1, 
{
    commandCount++;
    if (sscanf(text->linesPtr[i], "%s %s", command, textArgName) != 2)
    {
        error = INVALID_SYNTAX;
        print_assembler_error(error, text->linesPtr[i], i+1);
        break;
    }

    unsigned char cmd = POP;
    PUSH_AND_POP_BODY("pop");
}, 
{
    processor->IP++;

    if ((int) command == (POP | REG))
    {
        reg = (registerNames) *(processor->CS + processor->IP);

        err = processor_pop_to_register(processor, reg);

        processor->IP++;
    }
    else if(((unsigned int) command & COMMAND_MASK) == (POP | RAM | IMM))
    {
        int adress = -1;

        if (copy_data_from_buffer(processor->CS + processor->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        err = processor_pop_to_RAM(processor, adress);

        processor->IP += sizeof(int);
    }
    else if(((unsigned int) command & COMMAND_MASK) == (POP | RAM | REG))
    {
        int adress = 0;

        reg = (registerNames) *(processor->CS + processor->IP);
        
        err = calculate_RAM_adress(processor, reg, &adress);

        err = processor_pop_to_RAM(processor, adress);

        processor->IP += sizeof(char);
    }
    else if(((unsigned int) command & COMMAND_MASK) == (POP | IMM | REG | RAM))
    {
        int adress = -1;
        reg = (registerNames) *(processor->CS + processor->IP);
        processor->IP++;

        if (copy_data_from_buffer(processor->CS + processor->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        err = calculate_RAM_adress(processor, reg, &adress);

        err = processor_pop_to_RAM(processor, adress);

        processor->IP += sizeof(int);
    }
},
{
disasmCase->IP++;

    if ((int) command == (POP | REG))
    {
        reg = (registerNames) *(disasmCase->CS + disasmCase->IP);

        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "pop ");
        WRITE_REGISTER_NAME(reg);
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "\n");

        disasmCase->IP++;
    }
    else if(((unsigned int) command & COMMAND_MASK) == (POP | RAM | IMM))
    {
        int adress = -1;

        if (copy_data_from_buffer(disasmCase->CS + disasmCase->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "pop [%d]\n", adress);

        disasmCase->IP += sizeof(int);
    }
    else if(((unsigned int) command & COMMAND_MASK) == (POP | RAM | REG))
    {
        reg = (registerNames) *(disasmCase->CS + disasmCase->IP);
        
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "pop [");
        WRITE_REGISTER_NAME(reg);
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "]\n");

        disasmCase->IP += sizeof(char);
    }
    else if(((unsigned int) command & COMMAND_MASK) == (POP | IMM | REG | RAM))
    {
        int adress = -1;
        reg = (registerNames) *(disasmCase->CS + disasmCase->IP);
        disasmCase->IP++;

        if (copy_data_from_buffer(disasmCase->CS + disasmCase->IP, &adress, sizeof(int)))
        {
            return COPU_ARG_ERROR;
        }

        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "pop [");
        WRITE_REGISTER_NAME(reg);
        textBuffer.bufferPointer += (size_t) sprintf((textBuffer.Buffer + textBuffer.bufferPointer), "+%d]\n", adress);

        disasmCase->IP += sizeof(int);
    }
})

DEF_CMD("add", ADD, 0, 
{
    WRITE_SINGLE_COMMAND("add", ADD);
},
{
err = processor_add(&(processor->stack));
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("add");
})

DEF_CMD("sub", SUB, 0, 
{
    WRITE_SINGLE_COMMAND("sub", SUB);
},
{
err = processor_sub(&(processor->stack));
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("sub");
})

DEF_CMD("mul", MUL, 0, 
{
    WRITE_SINGLE_COMMAND("mul", MUL);
},
{
err = processor_mul(&(processor->stack));
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("mul");
})

DEF_CMD("div", DIV, 0, 
{
    WRITE_SINGLE_COMMAND("div", DIV);
},
{
err = processor_div(&(processor->stack));
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("div");
})

DEF_CMD("out", OUT, 0, 
{
    WRITE_SINGLE_COMMAND("out", OUT);
},
{
err = processor_out(&(processor->stack), stdout);
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("out");
})

DEF_CMD("sqrt", SQRT, 0, 
{
    WRITE_SINGLE_COMMAND("sqrt", SQRT);
},
{
err = processor_sqrt(&(processor->stack));
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("sqrt");
})

DEF_CMD("sin", SIN, 0, 
{
    WRITE_SINGLE_COMMAND("sin", SIN);
},
{
err = processor_trig(&(processor->stack), command);
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("sin");
})

DEF_CMD("cos", COS, 0, 
{
    WRITE_SINGLE_COMMAND("cos", COS);
},
{
err = processor_trig(&(processor->stack), command);
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("cos");
})

DEF_CMD("tan", TAN, 0, 
{
    WRITE_SINGLE_COMMAND("tan", TAN);
},
{
err = processor_trig(&(processor->stack), command);
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("tan");
})

DEF_CMD("in", IN, 0, 
{
    WRITE_SINGLE_COMMAND("in", IN);
},
{
err = processor_in(&(processor->stack));
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("in");
})

DEF_CMD("ret", RET, 0,
{
    WRITE_SINGLE_COMMAND("ret", RET);
},
{
err = processor_ret(processor);
},
{
    SINGLE_COMMAND_DISASM("ret");
})

DEF_CMD("hlt", HLT, 0, 
{
    WRITE_SINGLE_COMMAND("hlt", HLT);
},
{
err = processor_hlt(&(processor->stack));
processor->IP++;
return NO_PROCESSOR_ERRORS;
},
{
    SINGLE_COMMAND_DISASM("hlt");
})

DEF_CMD("draw", DRAW, 0,
{
    WRITE_SINGLE_COMMAND("draw", DRAW);
},
{
err = processor_console_draw(processor);
processor->IP++;
},
{
    SINGLE_COMMAND_DISASM("draw");
})

#undef WRITE_DOUBLE_COMMAND_TO_LISTING
#undef WRITE_SINGLE_COMMAND_TO_LISTING
#undef WRITE_COMMAND_TO_LISTING
#undef CHECK_REGISTER_NAME
#undef CHECH_TEXT_ARG
#undef JUMP_ASSEMBLER
#undef JUMP_PROCESSOR
#undef WRITE_SINGLE_COMMAND
#undef WRITE_REGISTER_NAME
#undef JUMP_DISASSEMBLER
#undef SINGLE_COMMAND_DISASM

#endif