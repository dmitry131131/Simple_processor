#define WRITE_COMMAND_TO_LISTING(command, code, arg)do{                                                                 \
    textBuffer.bufferPointer += (size_t)                                                                                \
    sprintf((textBuffer.Buffer + textBuffer.bufferPointer),                                                             \
    "%" LISTING_COMMAND_FORMAT "s""%" LISTING_COMMAND_FORMAT "d"                                                        \
    "%" LISTING_COMMAND_FORMAT "d""%s\n", (command), (code), (arg), text->linesPtr[i]);                                 \
}while(0)

#define WRITE_SINGLE_COMMAND_TO_LISTING(command, code)do{                                                               \
    textBuffer.bufferPointer += (size_t)                                                                                \
    sprintf((textBuffer.Buffer + textBuffer.bufferPointer),                                                             \
    "%" LISTING_COMMAND_FORMAT "s""%-20d""%s\n", (command), (code), text->linesPtr[i]);                                 \
}while(0)

#define WRITE_DOUBLE_COMMAND_TO_LISTING(command, code, arg)do{                                                          \
    textBuffer.bufferPointer += (size_t)                                                                                \
    sprintf((textBuffer.Buffer + textBuffer.bufferPointer),                                                             \
    "%" LISTING_COMMAND_FORMAT "s""%" LISTING_COMMAND_FORMAT "d"                                                        \
    "%" LISTING_COMMAND_FORMAT "lf""%s\n", (command), (code), (arg), text->linesPtr[i]);                                \
}while(0)

#define WRITE_SINGLE_COMMAND(command, num) do{                                                                          \
    commandCount++;                                                                                                     \
    WRITE_SINGLE_COMMAND_TO_LISTING(command, num);                                                                      \
    write_char_to_buffer(&binBuffer, num);                                                                              \
                                                                                                                        \
}while(0)

#define JUMP_ASSEMBLER(jmp_name, jmp_type) {                                                                            \
    commandCount++;                                                                                                     \
                                                                                                                        \
    if ((error = write_char_to_buffer(&binBuffer, jmp_type)))                                                           \
    {                                                                                                                   \
        break;                                                                                                          \
    }                                                                                                                   \
                                                                                                                        \
    int tagIp = -1;                                                                                                     \
    if (sscanf(text->linesPtr[i], "%s %d", command, &tagIp) == 2)                                                       \
    {                                                                                                                   \
        WRITE_COMMAND_TO_LISTING(jmp_name, jmp_type, tagIp);                                                            \
                                                                                                                        \
        if ((error = write_int_to_buffer(&binBuffer, tagIp)))                                                           \
        {                                                                                                               \
            break;                                                                                                      \
        }                                                                                                               \
        continue;                                                                                                       \
    }                                                                                                                   \
                                                                                                                        \
    char tagName[MAX_COMMAND_LEN] = {};                                                                                 \
                                                                                                                        \
    if (sscanf(text->linesPtr[i], "%s %s", command, tagName) != 2)                                                      \
    {                                                                                                                   \
        error = INVALID_SYNTAX;                                                                                         \
        print_assembler_error(error, text->linesPtr[i], i+1);                                                           \
        break;                                                                                                          \
    }                                                                                                                   \
                                                                                                                        \
    tagIp = -1;                                                                                                         \
    get_tag_ip(tagBuffer, tagName, &tagIp);                                                                             \
                                                                                                                        \
    WRITE_COMMAND_TO_LISTING(jmp_name, jmp_type, tagIp);                                                                \
                                                                                                                        \
    if ((error = write_int_to_buffer(&binBuffer, tagIp)))                                                               \
    {                                                                                                                   \
        break;                                                                                                          \
    }                                                                                                                   \
}

#define JUMP_PROCESSOR                                                                                                  \
    processor->IP++;                                                                                                    \
                                                                                                                        \
    int newIp = -1;                                                                                                     \
    if (copy_data_from_buffer(processor->CS + processor->IP, &newIp, sizeof(int)))                                      \
    {                                                                                                                   \
        RETURN(COPU_ARG_ERROR);                                                                                         \
    }


DEF_CMD("jmp", JMP, 1, 
    JUMP_ASSEMBLER("jmp", JMP), 
    {
        JUMP_PROCESSOR

        err = processor_jmp(processor, newIp);
    }
    )

DEF_CMD("ja", JA, 1,
JUMP_ASSEMBLER("ja", JA),
{
    JUMP_PROCESSOR

    err = processor_ja(processor, newIp);
})

DEF_CMD("jae", JAE, 1,
JUMP_ASSEMBLER("jae", JAE),
{
    JUMP_PROCESSOR

    err = processor_jae(processor, newIp);
})

DEF_CMD("jb", JB, 1,
JUMP_ASSEMBLER("jb", JB),
{
    JUMP_PROCESSOR

    err = processor_jb(processor, newIp);
})

DEF_CMD("jbe", JBE, 1,
JUMP_ASSEMBLER("jbe", JBE),
{
    JUMP_PROCESSOR

    err = processor_jbe(processor, newIp);
})

DEF_CMD("je", JE, 1,
JUMP_ASSEMBLER("je", JE),
{
    JUMP_PROCESSOR

    err = processor_je(processor, newIp);
})

DEF_CMD("jne", JNE, 1,
JUMP_ASSEMBLER("jne", JNE),
{
    JUMP_PROCESSOR

    err = processor_jne(processor, newIp);
})

DEF_CMD("call", CALL, 1,
JUMP_ASSEMBLER("call", CALL),
{
    JUMP_PROCESSOR

    err = processor_call(processor, newIp);
}
)

#undef JUMP_ASSEMBLER

#define CHECK_REGISTER_NAME(reg)                                        \
    if (textArgName[0] == 'r' && textArgName[2] == 'x')                 \
    {                                                                   \
        switch ((char) textArgName[1])                                  \
        {                                                               \
        case 'a':                                                       \
            reg = RAX;                                                  \
            break;                                                      \
        case 'b':                                                       \
            reg = RBX;                                                  \
            break;                                                      \
        case 'c':                                                       \
            reg = RCX;                                                  \
            break;                                                      \
        case 'd':                                                       \
            reg = RDX;                                                  \
            break;                                                      \
                                                                        \
        default:                                                        \
            error = WRONG_REGISTER_NAME;                                \
            print_assembler_error(error, text->linesPtr[i], i+1);       \
            break;                                                      \
        }                                                               \
    }                                                                   \
    else                                                                \
    {                                                                   \
        error = INVALID_SYNTAX;                                         \
        print_assembler_error(error, text->linesPtr[i], i+1);           \
        break;                                                          \
    }

#define CHECH_TEXT_ARG(textArgName)                                     \
    if (sscanf(textArgName, "%lf", &commandArg) == 1)                   \
    {                                                                   \
        cmd |= IMM;                                                     \
    }                                                                   \
    else if (strlen(textArgName) == 3)                                  \
    {                                                                   \
        cmd |= REG;                                                     \
                                                                        \
        CHECK_REGISTER_NAME(reg)                                        \
    }                                                                   \
    else                                                                \
    {                                                                   \
        cmd |= (REG | IMM);                                             \
        CHECK_REGISTER_NAME(reg)                                        \
        if(sscanf(textArgName + 3, "+%lf", &commandArg) != 1)           \
        {                                                               \
            error = INVALID_SYNTAX;                                     \
            print_assembler_error(error, text->linesPtr[i], i+1);       \
            break;                                                      \
        }                                                               \
    }

DEF_CMD("push", PUSH, 1,
    {                                                                       
        commandCount++;
        unsigned char cmd = PUSH;

        if(sscanf(text->linesPtr[i], "%s %lf", command, &commandArg) == 2)
        {
            cmd |= IMM;

            WRITE_DOUBLE_COMMAND_TO_LISTING("push", cmd, commandArg);

            if ((error = write_char_to_buffer(&binBuffer, cmd)))
            {
                break;
            }

            if ((error = write_double_to_buffer(&binBuffer, commandArg)))
            {
                break;
            }
        }

        else if (sscanf(text->linesPtr[i], "%s %s", command, textArgName) == 2)
        {
            registerNames reg = NO_REG;
            
            if (textArgName[0] == '[')
            {
                cmd |= RAM;
                
                if (sscanf(text->linesPtr[i], "%s [%[A-Za-z+0-9_]]", command, textArgName) != 2)
                {
                    error = INVALID_SYNTAX;
                    print_assembler_error(error, text->linesPtr[i], i+1);
                    break;
                }

                CHECH_TEXT_ARG(textArgName)
            }
            else
            {
                CHECH_TEXT_ARG(textArgName)
            }

            if (error) break;

            if ((error = write_char_to_buffer(&binBuffer, cmd)))
            {
                break;
            }

            WRITE_DOUBLE_COMMAND_TO_LISTING("push", cmd, commandArg);

            if (cmd & REG)
            {
                if ((error = write_char_to_buffer(&binBuffer, reg)))
                {
                    break;
                }
            }

            if ((cmd & IMM))
            {
                if ((error = write_int_to_buffer(&binBuffer, (int) commandArg)))
                {
                    break;
                }
            }
        }

        else
        {
            error = INVALID_SYNTAX;
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }
    }, 
    {
        processor->IP++;

        if ((int) command == (PUSH | IMM))
        {
            if (copy_data_from_buffer(processor->CS + processor->IP, &commandArg, sizeof(double)))
            {
                RETURN(COPU_ARG_ERROR);
            }

            err = processor_push(commandArg, &(processor->stack));

            processor->IP += sizeof(double);
        }
        else if ((int) command == (PUSH | REG))
        {
            reg = (registerNames) *(processor->CS + processor->IP);

            err = processor_push_from_register(processor, reg);

            processor->IP++;
        }
        else if ((int) command == (PUSH | RAM | IMM))
        {
            if (copy_data_from_buffer(processor->CS + processor->IP, &commandArg, sizeof(double)))
            {
                RETURN(COPU_ARG_ERROR);
            }

            err = processor_p
        }
    }
    )

DEF_CMD("pop", POP, 1, 
    {
        commandCount++;
        if (sscanf(text->linesPtr[i], "%s %s", command, textArgName) != 2)
        {
            error = INVALID_SYNTAX;
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }

        unsigned char cmd = POP;
        registerNames reg = NO_REG;

        if (textArgName[0] == '[')
        {
            cmd |= RAM;

            if (sscanf(text->linesPtr[i], "%s [%[A-Za-z+0-9_]]", command, textArgName) != 2)
            {
                error = INVALID_SYNTAX;
                print_assembler_error(error, text->linesPtr[i], i+1);
                break;
            }

            CHECH_TEXT_ARG(textArgName)
        }
        else
        {
            CHECH_TEXT_ARG(textArgName)
        }

        if ((error = write_char_to_buffer(&binBuffer, cmd)))
        {
            break;
        }

        WRITE_COMMAND_TO_LISTING("pop", cmd, reg);

        if (cmd & REG)
        {
            if ((error = write_char_to_buffer(&binBuffer, reg)))
            {
                break;
            }
        }

        if ((cmd & IMM))
        {
            if ((error = write_double_to_buffer(&binBuffer, commandArg)))
            {
                break;
            }
        }
    }, 
    processor->IP++;

    if ((int) command == (POP | REG))
    {
        reg = (registerNames) *(processor->CS + processor->IP);

        err = processor_pop_to_register(processor, reg);

        processor->IP++;
    }
    else if((int) command == (POP | RAM))
    {
        int adress = (int) *(processor->CS + processor->IP);

        err = processor_pop_to_RAM(processor, adress);

        processor->IP += sizeof(int);
    }
    )

#undef CHECK_REGISTER_NAME
#undef CHECH_TEXT_ARG

DEF_CMD("add", ADD, 0, 
    {
        WRITE_SINGLE_COMMAND("add", ADD);
    },
    err = processor_add(&(processor->stack));
    processor->IP++;
    )

DEF_CMD("sub", SUB, 0, 
    {
        WRITE_SINGLE_COMMAND("sub", SUB);
    },
    err = processor_sub(&(processor->stack));
    processor->IP++;
    )

DEF_CMD("mul", MUL, 0, 
    {
        WRITE_SINGLE_COMMAND("mul", MUL);
    },
    err = processor_mul(&(processor->stack));
    processor->IP++;
    )

DEF_CMD("div", DIV, 0, 
    {
        WRITE_SINGLE_COMMAND("div", DIV);
    },
    err = processor_div(&(processor->stack));
    processor->IP++;
    )

DEF_CMD("out", OUT, 0, 
    {
        WRITE_SINGLE_COMMAND("out", OUT);
    },
    err = processor_out(&(processor->stack), stdout);
    processor->IP++;
    )

DEF_CMD("sqrt", SQRT, 0, 
    {
        WRITE_SINGLE_COMMAND("sqrt", SQRT);
    },
    err = processor_sqrt(&(processor->stack));
    processor->IP++;
    )

DEF_CMD("sin", SIN, 0, 
    {
        WRITE_SINGLE_COMMAND("sin", SIN);
    },
    err = processor_trig(&(processor->stack), command);
    processor->IP++;
    )

DEF_CMD("cos", COS, 0, 
    {
        WRITE_SINGLE_COMMAND("cos", COS);
    },
    err = processor_trig(&(processor->stack), command);
    processor->IP++;
    )

DEF_CMD("tan", TAN, 0, 
    {
        WRITE_SINGLE_COMMAND("tan", TAN);
    },
    err = processor_trig(&(processor->stack), command);
    processor->IP++;
    )

DEF_CMD("in", IN, 0, 
    {
        WRITE_SINGLE_COMMAND("in", IN);
    },
    err = processor_in(&(processor->stack));
    processor->IP++;
    )

DEF_CMD("ret", RET, 0,
    {
        WRITE_SINGLE_COMMAND("ret", RET);
    },
    err = processor_ret(processor);
    )

DEF_CMD("hlt", HLT, 0, 
    {
        WRITE_SINGLE_COMMAND("hlt", HLT);
    },
    err = processor_hlt(&(processor->stack));
    processor->IP++;
    RETURN(NO_PROCESSOR_ERRORS);
    )

#undef WRITE_SINGLE_COMMAND
