#define WRITE_SINGLE_COMMAND(num) do{                   \
                                                        \
fprintf(outputTextFile, #num "\n");                     \
write_char_to_buffer(&binBuffer, num);                  \
                                                        \
}while(0)

DEF_CMD("jmp", 1, 1, 
    {
        fprintf(outputTextFile, "99 ");

        if ((error = write_char_to_buffer(&binBuffer, 14)))
        {
            break;
        }

        int tagIp = -1;
        if (sscanf(text->linesPtr[i], "%s %d", command, &tagIp) == 2)
        {
            fprintf(outputTextFile, "%d\n", tagIp);
        
            if ((error = write_int_to_buffer(&binBuffer, tagIp)))
            {
                break;
            }
            continue;
        }

        char tagName[MAX_COMMAND_LEN] = {};

        if (sscanf(text->linesPtr[i], "%s %s", command, tagName) != 2)
        {
            error = INVALID_SYNTAX;
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }

        tagIp = -1;
        if ((error = get_tag_ip(&tagBuffer, tagName, &tagIp)))
        {
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }

        fprintf(outputTextFile, "%d\n", tagIp);
        
        if ((error = write_int_to_buffer(&binBuffer, tagIp)))
        {
            break;
        }
    })

DEF_CMD("push", 1, 1, 
    {
        char cmd = 0;

        if(sscanf(text->linesPtr[i], "%s %lf", command, &commandArg) == 2)
        {
            cmd |= 1 << 0;
            cmd |= 1 << 4;

            fprintf(outputTextFile, "17 %lf\n", commandArg);

            if ((error = write_char_to_buffer(&binBuffer, cmd)))
            {
                break;
            }

            if ((error = write_double_to_buffer(&binBuffer, commandArg)))
            {
                break;
            }
        }

        else if (sscanf(text->linesPtr[i], "%s %s", command, registerName) == 2)
        {
            cmd |= 1 << 0;
            cmd |= 1 << 5;
            registerNames reg = NO_NAME_REG;

            fprintf(outputTextFile, "33 ");

            if ((error = write_char_to_buffer(&binBuffer, cmd)))
            {
                break;
            }

            if (registerName[0] == 'r' && registerName[2] == 'x')
            {
                switch (registerName[1])
                {
                case 97:
                    reg = RAX;
                    break;
                case 98:
                    reg = RBX;
                    break;
                case 99:
                    reg = RCX;
                    break;
                case 100:
                    reg = RDX;
                    break;
                
                default:
                    error = WRONG_REGISTER_NAME;
                    print_assembler_error(error, text->linesPtr[i], i+1);
                    break;
                }
            }
            else
            {
                error = INVALID_SYNTAX;
                print_assembler_error(error, text->linesPtr[i], i+1);
                break;
            }

            if (error) break;

            fprintf(outputTextFile, "%d\n", reg);

            if ((error = write_char_to_buffer(&binBuffer, reg)))
            {
                break;
            }
        }

        else
        {
            error = INVALID_SYNTAX;
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }
    })

DEF_CMD("pop", 1, 1, 
    {
        if (sscanf(text->linesPtr[i], "%s %s", command, registerName) != 2)
        {
            error = INVALID_SYNTAX;
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }

        char cmd = 0;

        cmd |= 1 << 0;
        cmd |= 1 << 2;
        cmd |= 1 << 3;
        cmd |= 1 << 5;
        registerNames reg = NO_NAME_REG;

        fprintf(outputTextFile, "45 ");

        if ((error = write_char_to_buffer(&binBuffer, cmd)))
        {
            break;
        }

        if (registerName[0] == 'r' && registerName[2] == 'x')
        {
            switch (registerName[1])
            {
            case 97:
                reg = RAX;
                break;
            case 98:
                reg = RBX;
                break;
            case 99:
                reg = RCX;
                break;
            case 100:
                reg = RDX;
                break;
            
            default:
                    error = WRONG_REGISTER_NAME;
                    print_assembler_error(error, text->linesPtr[i], i+1);
                    break;
                }
        }
        else
        {
            error = INVALID_SYNTAX;
            print_assembler_error(error, text->linesPtr[i], i+1);
            break;
        }

        if (error) break;

        fprintf(outputTextFile, "%d\n", reg);

        if ((error = write_char_to_buffer(&binBuffer, reg)))
        {
            break;
        }
    })

DEF_CMD("add", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(2);
    })

DEF_CMD("sub", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(3);
    })

DEF_CMD("mul", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(4);
    })

DEF_CMD("div", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(5);
    })

DEF_CMD("out", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(6);
    })

DEF_CMD("sqrt", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(7);
    })

DEF_CMD("sin", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(8);
    })

DEF_CMD("cos", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(9);
    })

DEF_CMD("tan", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(10);
    })

DEF_CMD("in", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(11);
    })

DEF_CMD("hlt", 1, 1, 
    {
        WRITE_SINGLE_COMMAND(12);
    })

#undef WRITE_SINGLE_COMMAND
